[{"path":"https://brio.r-lib.org/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 RStudio Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://brio.r-lib.org/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jim Hester. Author. Gábor Csárdi. Author, maintainer. . Copyright holder, funder.","code":""},{"path":"https://brio.r-lib.org/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hester J, Csárdi G (2022). brio: Basic R Input Output. https://brio.r-lib.org, https://github.com/r-lib/brio.","code":"@Manual{,   title = {brio: Basic R Input Output},   author = {Jim Hester and Gábor Csárdi},   year = {2022},   note = {https://brio.r-lib.org, https://github.com/r-lib/brio}, }"},{"path":"https://brio.r-lib.org/index.html","id":"brio---basic-r-input-output","dir":"","previous_headings":"","what":"Basic R Input Output","title":"Basic R Input Output","text":"Functions handle basic input output, functions always read write UTF-8 files provide explicit control line endings.","code":""},{"path":"https://brio.r-lib.org/index.html","id":"reading-files","dir":"","previous_headings":"","what":"Reading files","title":"Basic R Input Output","text":"","code":"library(brio) #>  #> Attaching package: 'brio' #> The following objects are masked from 'package:base': #>  #>     readLines, writeLines write_lines(c(\"abc\", \"123\"), \"my-file\")  # Write with windows newlines write_lines(c(\"abc\", \"123\"), \"my-file-2\", eol = \"\\r\\n\")  file_line_endings(\"my-file\") #> [1] \"\\n\"  file_line_endings(\"my-file-2\") #> [1] \"\\r\\n\"  read_lines(\"my-file\") #> [1] \"abc\" \"123\"  unlink(c(\"my-file\", \"my-file-2\"))"},{"path":"https://brio.r-lib.org/index.html","id":"drop-ins","dir":"","previous_headings":"","what":"Drop-ins","title":"Basic R Input Output","text":"brio also readLines() writeLines() functions drop-replacements base::readLines() base::writeLines(). functions thin wrappers around brio::read_lines() brio::write_lines(), deliberately fewer features base equivalents. want convert package using brio can add following line re-document.","code":"#' @importFrom brio readLines writeLines"},{"path":"https://brio.r-lib.org/index.html","id":"benchmarks","dir":"","previous_headings":"","what":"Benchmarks","title":"Basic R Input Output","text":"Speed necessarily goal brio, end nice side effect.","code":"gen_random <- function(characters, num_lines, min, max) {   line_lengths <- sample.int(max - min, num_lines, replace = TRUE) + min   vapply(line_lengths, function(len) paste(sample(characters, len, replace = TRUE), collapse = \"\"), character(1)) }  set.seed(42)  # generate 1000 random lines between 100-1000 characters long data <- gen_random(letters, 1000, min = 100, max = 1000)  brio::write_lines(data, \"benchmark\")"},{"path":"https://brio.r-lib.org/index.html","id":"reading","dir":"","previous_headings":"Benchmarks","what":"Reading","title":"Basic R Input Output","text":"Reading speeds decent amount faster brio, mainly due larger block sizes avoidance extra copies.","code":"bench::mark(   brio::read_lines(\"benchmark\"),   readr::read_lines(\"benchmark\"),   base::readLines(\"benchmark\") ) #> # A tibble: 3 × 6 #>   expression                          min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                     <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 brio::read_lines(\"benchmark\")  676.56µs 694.67µs     1382.    8.05KB     0    #> 2 readr::read_lines(\"benchmark\")   3.87ms   4.19ms      235.     7.2MB     8.70 #> 3 base::readLines(\"benchmark\")     3.68ms   3.92ms      250.   31.39KB     0"},{"path":"https://brio.r-lib.org/index.html","id":"writing","dir":"","previous_headings":"Benchmarks","what":"Writing","title":"Basic R Input Output","text":"Write speeds basically regardless method, though brio avoid extra memory allocations.","code":"bench::mark(   brio::write_lines(data, \"benchmark\"),   readr::write_lines(data, \"benchmark\"),   base::writeLines(data, \"benchmark\"),   check = FALSE ) #> # A tibble: 3 × 6 #>   expression                                 min   median `itr/sec` mem_alloc #>   <bch:expr>                            <bch:tm> <bch:tm>     <dbl> <bch:byt> #> 1 brio::write_lines(data, \"benchmark\")   833.8µs    1.3ms     751.         0B #> 2 readr::write_lines(data, \"benchmark\")  11.86ms     13ms      76.5     195KB #> 3 base::writeLines(data, \"benchmark\")     1.07ms   1.52ms     636.         0B #> # … with 1 more variable: gc/sec <dbl>  unlink(\"benchmark\")"},{"path":"https://brio.r-lib.org/reference/file_line_endings.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the type of line endings used by a file — file_line_endings","title":"Retrieve the type of line endings used by a file — file_line_endings","text":"Retrieve type line endings used file","code":""},{"path":"https://brio.r-lib.org/reference/file_line_endings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the type of line endings used by a file — file_line_endings","text":"","code":"file_line_endings(path)"},{"path":"https://brio.r-lib.org/reference/file_line_endings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the type of line endings used by a file — file_line_endings","text":"path character string path file read.","code":""},{"path":"https://brio.r-lib.org/reference/file_line_endings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the type of line endings used by a file — file_line_endings","text":"line endings used, one '\\n' - file uses Unix line endings '\\r\\n' - file uses Windows line endings NA - determined","code":""},{"path":"https://brio.r-lib.org/reference/file_line_endings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the type of line endings used by a file — file_line_endings","text":"","code":"tf1 <- tempfile() tf2 <- tempfile() write_lines(\"foo\", tf1, eol = \"\\n\") write_lines(\"bar\", tf2, eol = \"\\r\\n\")  file_line_endings(tf1) #> [1] \"\\n\" file_line_endings(tf2) #> [1] \"\\r\\n\"  unlink(c(tf1, tf2))"},{"path":"https://brio.r-lib.org/reference/readLines.html","id":null,"dir":"Reference","previous_headings":"","what":"Read text lines from a file — readLines","title":"Read text lines from a file — readLines","text":"drop replacement base::readLines() restricted functionality. Compared base::readLines() : works file paths, connections. Assumes files always UTF-8 encoded. warn skip embedded nulls, likely crash R. warn file missing end line character. arguments ok, warn, encoding skipNul ignored, warning.","code":""},{"path":"https://brio.r-lib.org/reference/readLines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read text lines from a file — readLines","text":"","code":"readLines(con, n = -1, ok, warn, encoding, skipNul)"},{"path":"https://brio.r-lib.org/reference/readLines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read text lines from a file — readLines","text":"con character string path file. Throws error connection object passed. n integer. number lines read. negative number means read lines file. ok Ignored, warning. warn Ignored, warning. encoding Ignored, warning. skipNul Ignored, warning.","code":""},{"path":"https://brio.r-lib.org/reference/readLines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read text lines from a file — readLines","text":"UTF-8 encoded character vector lines file.","code":""},{"path":[]},{"path":"https://brio.r-lib.org/reference/readLines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read text lines from a file — readLines","text":"","code":"authors_file <- file.path(R.home(\"doc\"), \"AUTHORS\") data <- readLines(authors_file)  # Trying to use connections throws an error con <- file(authors_file) try(readLines(con)) #> Error : Only file paths are supported by brio::readLines() close(con)  # Trying to use unsupported args throws a warning data <- readLines(authors_file, encoding = \"UTF-16\") #> Warning: `encoding` is ignored by brio::readLines()"},{"path":"https://brio.r-lib.org/reference/read_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read an entire file — read_file","title":"Read an entire file — read_file","text":"read_file() reads entire file single character vector. read_file_raw() reads entire file raw vector.","code":""},{"path":"https://brio.r-lib.org/reference/read_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read an entire file — read_file","text":"","code":"read_file(path)  read_file_raw(path)"},{"path":"https://brio.r-lib.org/reference/read_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read an entire file — read_file","text":"path character string path file read.","code":""},{"path":"https://brio.r-lib.org/reference/read_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read an entire file — read_file","text":"read_file(): length 1 character vector. read_file_raw(): raw vector.","code":""},{"path":"https://brio.r-lib.org/reference/read_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read an entire file — read_file","text":"read_file() assumes file UTF-8 encoding.","code":""},{"path":"https://brio.r-lib.org/reference/read_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read an entire file — read_file","text":"","code":"authors_file <- file.path(R.home(\"doc\"), \"AUTHORS\") data <- read_file(authors_file) data_raw <- read_file_raw(authors_file) identical(data, rawToChar(data_raw)) #> [1] TRUE"},{"path":"https://brio.r-lib.org/reference/read_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Read text lines from a file — read_lines","title":"Read text lines from a file — read_lines","text":"file assumed UTF-8 resulting text encoding set .","code":""},{"path":"https://brio.r-lib.org/reference/read_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read text lines from a file — read_lines","text":"","code":"read_lines(path, n = -1)"},{"path":"https://brio.r-lib.org/reference/read_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read text lines from a file — read_lines","text":"path character string path file read. n integer. number lines read. negative number means read lines file.","code":""},{"path":"https://brio.r-lib.org/reference/read_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read text lines from a file — read_lines","text":"UTF-8 encoded character vector lines file.","code":""},{"path":"https://brio.r-lib.org/reference/read_lines.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read text lines from a file — read_lines","text":"'\\r\\n' '\\n' treated newline.","code":""},{"path":"https://brio.r-lib.org/reference/read_lines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read text lines from a file — read_lines","text":"","code":"authors_file <- file.path(R.home(\"doc\"), \"AUTHORS\") data <- read_lines(authors_file)"},{"path":"https://brio.r-lib.org/reference/writeLines.html","id":null,"dir":"Reference","previous_headings":"","what":"Write lines to a file — writeLines","title":"Write lines to a file — writeLines","text":"drop replacement base::writeLines() restricted functionality. Compared base::writeLines() : works file paths, connections. Uses enc2utf8() convert text() UTF-8 writing. Uses sep unconditionally line ending, regardless platform. useBytes argument ignored, warning.","code":""},{"path":"https://brio.r-lib.org/reference/writeLines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write lines to a file — writeLines","text":"","code":"writeLines(text, con, sep = \"\\n\", useBytes)"},{"path":"https://brio.r-lib.org/reference/writeLines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write lines to a file — writeLines","text":"text character vector write con character string path file. Throws error connection object passed. sep end line characters use lines. useBytes Ignored, warning.","code":""},{"path":"https://brio.r-lib.org/reference/writeLines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write lines to a file — writeLines","text":"UTF-8 encoded input text (invisibly).","code":""},{"path":[]},{"path":"https://brio.r-lib.org/reference/writeLines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write lines to a file — writeLines","text":"","code":"tf <- tempfile()  writeLines(rownames(mtcars), tf)  # Trying to use connections throws an error con <- file(tf) try(writeLines(con)) #> Error in writeLines(con) : argument \"con\" is missing, with no default close(con)  # Trying to use unsupported args throws a warning writeLines(rownames(mtcars), tf, useBytes = TRUE) #> Warning: `useBytes` is ignored by brio::writeLines()  unlink(tf)"},{"path":"https://brio.r-lib.org/reference/write_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Write data to a file — write_file","title":"Write data to a file — write_file","text":"function differs write_lines() writes data text directly, without checking adding newlines.","code":""},{"path":"https://brio.r-lib.org/reference/write_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write data to a file — write_file","text":"","code":"write_file(text, path)"},{"path":"https://brio.r-lib.org/reference/write_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write data to a file — write_file","text":"text character vector length 1 data write. path character string giving file path write .","code":""},{"path":"https://brio.r-lib.org/reference/write_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write data to a file — write_file","text":"UTF-8 encoded input text (invisibly).","code":""},{"path":"https://brio.r-lib.org/reference/write_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write data to a file — write_file","text":"","code":"tf <- tempfile()  write_file(\"some data\\n\", tf)  unlink(tf)"},{"path":"https://brio.r-lib.org/reference/write_file_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Write data to a file — write_file_raw","title":"Write data to a file — write_file_raw","text":"function differs write_lines() writes data text directly, without checking adding newlines.","code":""},{"path":"https://brio.r-lib.org/reference/write_file_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write data to a file — write_file_raw","text":"","code":"write_file_raw(raw, path)"},{"path":"https://brio.r-lib.org/reference/write_file_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write data to a file — write_file_raw","text":"raw raw vector data write. path character string giving file path write .","code":""},{"path":"https://brio.r-lib.org/reference/write_file_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write data to a file — write_file_raw","text":"","code":"tf <- tempfile()  write_file_raw(as.raw(c(0x66, 0x6f, 0x6f, 0x0, 0x62, 0x61, 0x72)), tf)  unlink(tf)"},{"path":"https://brio.r-lib.org/reference/write_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Write lines to a file — write_lines","title":"Write lines to a file — write_lines","text":"text converted UTF-8 encoding writing.","code":""},{"path":"https://brio.r-lib.org/reference/write_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write lines to a file — write_lines","text":"","code":"write_lines(text, path, eol = \"\\n\")"},{"path":"https://brio.r-lib.org/reference/write_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write lines to a file — write_lines","text":"text character vector write path character string giving file path write . eol end line characters use lines.","code":""},{"path":"https://brio.r-lib.org/reference/write_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write lines to a file — write_lines","text":"UTF-8 encoded input text (invisibly).","code":""},{"path":"https://brio.r-lib.org/reference/write_lines.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write lines to a file — write_lines","text":"files opened binary mode, always use exactly string given eol line separator. write file windows line endings use write_lines(eol = \"\\r\\n\")","code":""},{"path":"https://brio.r-lib.org/reference/write_lines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write lines to a file — write_lines","text":"","code":"tf <- tempfile()  write_lines(rownames(mtcars), tf)  # Write with Windows style line endings write_lines(rownames(mtcars), tf, eol = \"\\r\\n\")  unlink(tf)"},{"path":"https://brio.r-lib.org/news/index.html","id":"brio-113","dir":"Changelog","previous_headings":"","what":"brio 1.1.3","title":"brio 1.1.3","text":"CRAN release: 2021-11-30 Gábor Csárdi now maintainer. New write_file_raw() function write raw vector file. Fix memory leak read_lines() (@ms609, #20)","code":""},{"path":"https://brio.r-lib.org/news/index.html","id":"brio-112","dir":"Changelog","previous_headings":"","what":"brio 1.1.2","title":"brio 1.1.2","text":"CRAN release: 2021-04-23 Input filenames now automatically converted UTF-8 native encoding (@gaborcsardi, #15) read_file_raw() now closes file handles (@pbarber, #16)","code":""},{"path":"https://brio.r-lib.org/news/index.html","id":"brio-111","dir":"Changelog","previous_headings":"","what":"brio 1.1.1","title":"brio 1.1.1","text":"CRAN release: 2021-01-20 file_line_endings() now works expected ARM systems (#8)","code":""},{"path":"https://brio.r-lib.org/news/index.html","id":"brio-110","dir":"Changelog","previous_headings":"","what":"brio 1.1.0","title":"brio 1.1.0","text":"CRAN release: 2020-08-31 New write_file() function write entire file (#7) read_lines() longer leaks file handles. Added NEWS.md file track changes package.","code":""},{"path":"https://brio.r-lib.org/news/index.html","id":"brio-100","dir":"Changelog","previous_headings":"","what":"brio 1.0.0","title":"brio 1.0.0","text":"CRAN release: 2020-03-26 Initial release","code":""}]
